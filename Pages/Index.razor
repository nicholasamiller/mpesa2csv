@namespace Mpesa2Csv
@page "/"
@using MPesa2Csv.Web.Dialogs
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

@using System.Text.RegularExpressions
@using iText.Kernel.Pdf;
@using iText.Kernel.Pdf.Canvas.Parser;
@using Microsoft.JSInterop;



<PageTitle>Mpesa PDF to CSV converter</PageTitle>
<MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".pdf">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Filled.CloudUpload"
                   for="@context">
            Upload
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>


@code {

    private async Task UploadFiles(IBrowserFile file)
    {
        var fileStream = file.OpenReadStream();
        var csvName = MakeCsvName(file.Name);
        await Run(fileStream,csvName);
    }

    private string MakeCsvName(string pdfName)
    {
        return Regex.Replace(pdfName, ".pdf$", ".csv");
    }

    private async Task Run(Stream fileStream, string csvName)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("FileStream", fileStream);
        var dialog = DialogService.Show<PasswordDialog>("PDF Password", parameters, options);
        var pdfResult = await dialog.Result;
        var asPdfDoc = (PdfDocument)pdfResult.Data;
        var convertedCsv = await ConvertToCsvAsync(asPdfDoc);
        await DownloadCsvAsync(convertedCsv, csvName);
    }

    private async Task<Stream> ConvertToCsvAsync(PdfDocument pdfDoc)
    {
        var resultStream = await Task.Run(() => Converter.ConvertToCsv(pdfDoc));
        return resultStream;
    }

    private async Task DownloadCsvAsync(Stream stream, string csvName)
    {
        using (var outputStream = new MemoryStream())
        {
            await stream.CopyToAsync(outputStream);

            await JSRuntime.InvokeVoidAsync("downloadFromByteArray",
            new
            {
                ByteArray = outputStream.ToArray(),
                FileName = csvName,
                ContentType = "application/pdf"
            });


        }
        stream.Dispose();
    }
    
}
