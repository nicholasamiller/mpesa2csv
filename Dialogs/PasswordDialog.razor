@using System.Text.RegularExpressions
@using System.Text
@using iText.IO.Source
@using iText.Kernel.Exceptions
@using iText.Kernel.Pdf;
@using iText.Kernel.Pdf.Canvas.Parser;
@using System.ComponentModel.DataAnnotations
@using FluentValidation

<MudDialog>
    <DialogContent>
        
        <EditForm EditContext="editContext" OnValidSubmit="@HandleValidSubmit">
        
            <MudTextField T="string" Label="Password"  Variant="Variant.Outlined" InputType="InputType.Password" For="@(() => model.Password)" @bind-Value="model.Password" />
            <ValidationMessage For="() => model.Password" />
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Convert</MudButton>
        </EditForm>
            
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    @code {

        // pass in browser file as parameter
        // submit button shows when password is not empty
        // on submit, validate  
        // validate by trying to convert file
        // if successfully converted, return pdf object

        // set as parameter when creating dialog
        [Parameter] public Stream FileStream { get; set; }
        [CascadingParameter] MudDialogInstance MudDialog { get; set; }
        EditContext editContext;
        PasswordForm model = new PasswordForm();
        ValidationMessageStore validationMessageStore;
        byte[] _pdfBytes;
        PdfReader _pdfReader;
        protected override void OnInitialized()
        {
            editContext = new EditContext(model);
            editContext.OnValidationRequested += HandleValidationRequested;
            validationMessageStore = new ValidationMessageStore(editContext);
        }
        protected override async Task OnParametersSetAsync()
        {
            _pdfBytes = new byte[FileStream.Length];
            await FileStream.ReadAsync(_pdfBytes, 0, (int)FileStream.Length);
            
        }

        private void HandleValidationRequested(object sender, ValidationRequestedEventArgs e)
        {
            validationMessageStore.Clear();
            var password = model.Password;
            var readerProperties = new ReaderProperties().SetPassword(Encoding.UTF8.GetBytes(password));
            try
            {
                var sourceFactory = new RandomAccessSourceFactory();
                var byteSource = sourceFactory.CreateSource(_pdfBytes);
                _pdfReader = new PdfReader(byteSource, readerProperties);
            }
            catch (BadPasswordException)
            {
                validationMessageStore.Add(() => model.Password,  "Invalid password");
            }
        }

        private void HandleValidSubmit()
        {
            MudDialog.Close(DialogResult.Ok(_pdfReader));
               
        }

        void Cancel() => MudDialog.Close(DialogResult.Cancel);

        
        public class PasswordForm {
            public string Password { get; set; }
        }

    }
}
